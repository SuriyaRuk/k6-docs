#!/bin/bash

# K6 Results Analyzer Script
# ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö

echo "üìä K6 Results Analyzer"
echo "====================="

# ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ results directory ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
if [ ! -d "results" ]; then
    echo "‚ùå Results directory not found. Please run tests first."
    exit 1
fi

# ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
json_count=$(find results -name "*.json" | wc -l)
csv_count=$(find results -name "*.csv" | wc -l)

echo "üìÅ Found $json_count JSON files and $csv_count CSV files"
echo ""

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON
analyze_json_basic() {
    local file=$1
    echo "üìÑ Analyzing: $(basename $file)"
    echo "---"
    
    # ‡πÉ‡∏ä‡πâ jq ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç (‡∏´‡∏≤‡∏Å jq ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà)
    if command -v jq &> /dev/null; then
        echo "üîç Quick Stats:"
        
        # HTTP requests
        http_reqs=$(cat "$file" | jq -r 'select(.metric=="http_reqs") | .value' | awk '{sum+=$1} END {print sum}')
        echo "  Total HTTP Requests: ${http_reqs:-0}"
        
        # Average response time
        avg_duration=$(cat "$file" | jq -r 'select(.metric=="http_req_duration") | .value' | awk '{sum+=$1; count++} END {if(count>0) print sum/count; else print 0}')
        echo "  Average Response Time: ${avg_duration:-0}ms"
        
        # Checks
        checks_passed=$(cat "$file" | jq -r 'select(.metric=="checks" and .tags.check != "failed") | .value' | awk '{sum+=$1} END {print sum}')
        checks_failed=$(cat "$file" | jq -r 'select(.metric=="checks" and .tags.check == "failed") | .value' | awk '{sum+=$1} END {print sum}')
        
        if [[ "${checks_passed:-0}" -gt 0 ]] || [[ "${checks_failed:-0}" -gt 0 ]]; then
            total_checks=$((${checks_passed:-0} + ${checks_failed:-0}))
            if [[ $total_checks -gt 0 ]]; then
                success_rate=$(echo "scale=2; ${checks_passed:-0} * 100 / $total_checks" | bc -l)
                echo "  Success Rate: ${success_rate}%"
            fi
        fi
    else
        echo "  ‚ö†Ô∏è  Install 'jq' for detailed JSON analysis"
        echo "  File size: $(du -h "$file" | cut -f1)"
        echo "  Lines: $(wc -l < "$file")"
    fi
    
    echo ""
}

# Function ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV
analyze_csv_basic() {
    local file=$1
    echo "üìÑ Analyzing: $(basename $file)"
    echo "---"
    
    if [[ -s "$file" ]]; then
        lines=$(wc -l < "$file")
        echo "  Total lines: $lines"
        echo "  File size: $(du -h "$file" | cut -f1)"
        
        # ‡πÅ‡∏™‡∏î‡∏á header
        echo "  Headers:"
        head -1 "$file" | tr ',' '\n' | nl
    else
        echo "  ‚ö†Ô∏è  File is empty"
    fi
    
    echo ""
}

# Menu
echo "Select analysis option:"
echo "1) Quick summary of all results"
echo "2) Detailed analysis using Python script"
echo "3) Analyze specific file"
echo "4) List all result files"

read -p "Enter your choice (1-4): " choice

case $choice in
    1)
        echo "üîç Quick Summary:"
        echo "=================="
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå JSON
        for json_file in results/*.json; do
            if [[ -f "$json_file" ]]; then
                analyze_json_basic "$json_file"
            fi
        done
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå CSV
        for csv_file in results/*.csv; do
            if [[ -f "$csv_file" ]]; then
                analyze_csv_basic "$csv_file"
            fi
        done
        ;;
        
    2)
        echo "üêç Running Python analysis..."
        if command -v python3 &> /dev/null; then
            python3 analyze-results.py
        else
            echo "‚ùå Python3 not found. Please install Python3 for detailed analysis."
        fi
        ;;
        
    3)
        echo "üìÅ Available files:"
        ls -la results/
        echo ""
        read -p "Enter filename to analyze: " filename
        
        if [[ -f "results/$filename" ]]; then
            if [[ "$filename" == *.json ]]; then
                analyze_json_basic "results/$filename"
            elif [[ "$filename" == *.csv ]]; then
                analyze_csv_basic "results/$filename"
            else
                echo "üìÑ File content preview:"
                head -20 "results/$filename"
            fi
        else
            echo "‚ùå File not found: results/$filename"
        fi
        ;;
        
    4)
        echo "üìÅ All result files:"
        echo "==================="
        ls -lah results/
        ;;
        
    *)
        echo "‚ùå Invalid choice"
        exit 1
        ;;
esac

echo ""
echo "üí° Tips:"
echo "- Use 'jq' for advanced JSON analysis"
echo "- Use Python script with pandas for detailed statistics"
echo "- Import CSV files to Excel/Google Sheets for visualization"
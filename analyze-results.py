#!/usr/bin/env python3
"""
K6 Results Analyzer
‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å K6 load tests
"""

import json
import pandas as pd
import sys
import os
from datetime import datetime
import matplotlib.pyplot as plt
import seaborn as sns

def analyze_json_results(file_path):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå JSON"""
    print(f"üìä Analyzing {file_path}")
    print("=" * 50)
    
    with open(file_path, 'r') as f:
        data = []
        for line in f:
            try:
                data.append(json.loads(line))
            except json.JSONDecodeError:
                continue
    
    if not data:
        print("‚ùå No valid data found in file")
        return
    
    # ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° metric type
    http_reqs = [d for d in data if d.get('metric') == 'http_reqs']
    http_req_duration = [d for d in data if d.get('metric') == 'http_req_duration']
    checks = [d for d in data if d.get('metric') == 'checks']
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    if http_reqs:
        total_requests = sum(d.get('value', 0) for d in http_reqs)
        print(f"üî¢ Total Requests: {total_requests}")
    
    if http_req_duration:
        durations = [d.get('value', 0) for d in http_req_duration if d.get('value')]
        if durations:
            avg_duration = sum(durations) / len(durations)
            min_duration = min(durations)
            max_duration = max(durations)
            print(f"‚è±Ô∏è  Average Response Time: {avg_duration:.2f}ms")
            print(f"‚è±Ô∏è  Min Response Time: {min_duration:.2f}ms")
            print(f"‚è±Ô∏è  Max Response Time: {max_duration:.2f}ms")
    
    if checks:
        passed_checks = sum(d.get('value', 0) for d in checks if d.get('tags', {}).get('check') != 'failed')
        failed_checks = sum(d.get('value', 0) for d in checks if d.get('tags', {}).get('check') == 'failed')
        total_checks = passed_checks + failed_checks
        
        if total_checks > 0:
            success_rate = (passed_checks / total_checks) * 100
            print(f"‚úÖ Success Rate: {success_rate:.2f}%")
            print(f"‚ùå Failed Checks: {failed_checks}")
    
    print()

def analyze_csv_results(file_path):
    """‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå CSV"""
    print(f"üìà CSV Analysis for {file_path}")
    print("=" * 50)
    
    try:
        df = pd.read_csv(file_path)
        
        if 'metric_value' in df.columns:
            # ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô
            print("üìä Basic Statistics:")
            print(df['metric_value'].describe())
            print()
            
            # ‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏∞‡∏à‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á metrics
            if 'metric_name' in df.columns:
                print("üìã Metrics Summary:")
                metrics_summary = df.groupby('metric_name')['metric_value'].agg(['count', 'mean', 'std', 'min', 'max'])
                print(metrics_summary)
                print()
        
    except Exception as e:
        print(f"‚ùå Error reading CSV file: {e}")
    
    print()

def generate_summary_report():
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå results ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î"""
    results_dir = 'results'
    
    if not os.path.exists(results_dir):
        print("‚ùå Results directory not found")
        return
    
    json_files = [f for f in os.listdir(results_dir) if f.endswith('.json')]
    csv_files = [f for f in os.listdir(results_dir) if f.endswith('.csv')]
    
    print("üìã K6 Load Test Results Summary")
    print("=" * 50)
    print(f"üìÅ Results Directory: {results_dir}")
    print(f"üìÑ JSON Files: {len(json_files)}")
    print(f"üìÑ CSV Files: {len(csv_files)}")
    print()
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå JSON
    for json_file in sorted(json_files):
        file_path = os.path.join(results_dir, json_file)
        analyze_json_results(file_path)
    
    # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÑ‡∏ü‡∏•‡πå CSV
    for csv_file in sorted(csv_files):
        file_path = os.path.join(results_dir, csv_file)
        analyze_csv_results(file_path)

def main():
    """Main function"""
    if len(sys.argv) > 1:
        file_path = sys.argv[1]
        if file_path.endswith('.json'):
            analyze_json_results(file_path)
        elif file_path.endswith('.csv'):
            analyze_csv_results(file_path)
        else:
            print("‚ùå Unsupported file format. Use .json or .csv files")
    else:
        generate_summary_report()

if __name__ == "__main__":
    main()